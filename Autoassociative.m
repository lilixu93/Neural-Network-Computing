% training set  which has been converted to matrix format
s =[  
 -1  1  1  1  -1  1  -1  -1  -1  1  1  -1  -1  -1  1  1  -1  -1  -1  1  1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1 -1;
 -1  -1  1  -1  -1  -1  1  1  -1  -1  1  -1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  1  1  1  1  1;
 -1  1  1  1  -1  1  -1  -1  -1  1  -1  -1  -1  1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  -1  1  -1  -1  -1  1  1  1  1  1;
 -1  1  1  1  -1  1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  1  1  -1  -1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1 -1;
 -1  -1  -1  -1  1  -1  -1  -1  1  1  -1  -1  1  -1  1  -1  1  -1  -1  1  1  1  1  1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1;
 1  1  1  1  1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  1  1  1  -1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  1  1  1  1 -1;
 -1  1  1  1  1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  1  1  1  -1  1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1 -1;
 1  1  1  1  1  -1  -1  -1  -1  1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  -1  1 -1 -1 -1;
 -1  1  1  1  -1  1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1  -1  1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1 -1;
 -1  1  1  1  -1  1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  1  1  1  1 -1;
];

function f = bipolar(x,theta=0)
	if x > theta
		f = 1;
	elseif x < theta * -1
		f = -1;
	else
		f = 0;
	end
end

% Hebb Rule  intial weights and bias are both zero
w = 0;
for j = 1:10
	i = 11-j
	w +=  s(i,:)' * s(i,:);
	result = s(i,:) * w;
	result = arrayfun(@bipolar, result);
	nnz(result - s(i,:))
end
