% training set  which has been converted to matrix format
s =[  
 -1  1  1  1  -1  1  -1  -1  -1  1  1  -1  -1  -1  1  1  -1  -1  -1  1  1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1 -1;
 -1  -1  1  -1  -1  -1  1  1  -1  -1  1  -1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  1  1  1  1  1;
 -1  1  1  1  -1  1  -1  -1  -1  1  -1  -1  -1  1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  -1  1  -1  -1  -1  1  1  1  1  1;
 -1  1  1  1  -1  1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  1  1  -1  -1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1 -1;
 -1  -1  -1  -1  1  -1  -1  -1  1  1  -1  -1  1  -1  1  -1  1  -1  -1  1  1  1  1  1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1;
 1  1  1  1  1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  1  1  1  -1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  1  1  1  1 -1;
 -1  1  1  1  1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  1  1  1  -1  1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1 -1;
 1  1  1  1  1  -1  -1  -1  -1  1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  -1  1  -1  -1  -1  -1  1  -1  -1  -1  1 -1 -1 -1;
 -1  1  1  1  -1  1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1  -1  1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1 -1;
 -1  1  1  1  -1  1  -1  -1  -1  1  1  -1  -1  -1  1  -1  1  1  1  1  -1  -1  -1  -1  1  -1  -1  -1  -1  1  1  1  1  1 -1;
];

function f = bipolar(x,theta=0)
	if x > theta
		f = 1;
	elseif x < theta * -1
		f = -1;
	else
		f = 0;
	end
end

% Hebb Rule  intial weights and bias are both zero
for n = 1:10
	w = 0;
	for i = n: 10+n-1
		j = mod(i,10);
		if j == 0
			j = 10;
		end
		w +=  s(j,:)' * s(j,:);
	end
	n
	count = 0;
	for i = 1:10
		if nnz(arrayfun(@bipolar, s(i,:) * w)-s(i,:)) == 0
			i
			count += 1;
		end
	end
	count
end